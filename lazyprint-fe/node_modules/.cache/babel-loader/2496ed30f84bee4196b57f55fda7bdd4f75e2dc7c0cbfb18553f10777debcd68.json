{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { printerListContainerStyle, sortDropdownStyle, printerListStyle, printerItemStyle } from './styles';\nconst PrinterListComponent = () => {\n  _s();\n  const [printers, setPrinters] = useState([]);\n  const [sortOption, setSortOption] = useState('');\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/api/get_printer_list');\n        if (response.ok) {\n          const data = await response.json();\n          console.log('Fetched data:', data); // Add this log\n\n          const printerData = data.printers || [];\n          setPrinters(printerData);\n        } else {\n          console.error('Failed to fetch printer data:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error fetching printer data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleSort = option => {\n    let sortedPrinters = [...printers];\n    switch (option) {\n      case 'distance':\n        sortedPrinters.sort((a, b) => a.distance - b.distance);\n        break;\n      case 'time':\n        sortedPrinters.sort((a, b) => a.time - b.time);\n        break;\n      default:\n        break;\n    }\n    console.log('Sorted printers:', sortedPrinters); // Add this log\n    setPrinters(sortedPrinters);\n    setSortOption(option);\n  };\n\n  // ... (return and other parts of the component)\n};\n_s(PrinterListComponent, \"hUv4D0H7NvYwEc8JDL8SrLiEwDY=\");\n_c = PrinterListComponent;\nvar _c;\n$RefreshReg$(_c, \"PrinterListComponent\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","printerListContainerStyle","sortDropdownStyle","printerListStyle","printerItemStyle","PrinterListComponent","_s","printers","setPrinters","sortOption","setSortOption","fetchData","response","fetch","ok","data","json","console","log","printerData","error","statusText","handleSort","option","sortedPrinters","sort","a","b","distance","time","_c","$RefreshReg$"],"sources":["C:/Users/TechNerd-Academic/Documents/Source Code Files/Cloned from GitHub/CSCN72030-Group_2-LazyPrint/lazyprint-fe/src/components/PrinterList/PrinterList.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  printerListContainerStyle,\r\n  sortDropdownStyle,\r\n  printerListStyle,\r\n  printerItemStyle,\r\n} from './styles';\r\n\r\n\r\nconst PrinterListComponent = () => {\r\n  const [printers, setPrinters] = useState([]);\r\n  const [sortOption, setSortOption] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('/api/get_printer_list');\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          console.log('Fetched data:', data); // Add this log\r\n          \r\n          const printerData = data.printers || [];\r\n          setPrinters(printerData);\r\n        } else {\r\n          console.error('Failed to fetch printer data:', response.statusText);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching printer data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleSort = (option) => {\r\n    let sortedPrinters = [...printers];\r\n\r\n    switch (option) {\r\n      case 'distance':\r\n        sortedPrinters.sort((a, b) => a.distance - b.distance);\r\n        break;\r\n      case 'time':\r\n        sortedPrinters.sort((a, b) => a.time - b.time);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    console.log('Sorted printers:', sortedPrinters); // Add this log\r\n    setPrinters(sortedPrinters);\r\n    setSortOption(option);\r\n  };\r\n\r\n  // ... (return and other parts of the component)\r\n};\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,YAAY;AAClC,SACEC,yBAAyB,EACzBC,iBAAiB,EACjBC,gBAAgB,EAChBC,gBAAgB,QACX,UAAU;AAGjB,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uBAAuB,CAAC;QAErD,IAAID,QAAQ,CAACE,EAAE,EAAE;UACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UAClCC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,IAAI,CAAC,CAAC,CAAC;;UAEpC,MAAMI,WAAW,GAAGJ,IAAI,CAACR,QAAQ,IAAI,EAAE;UACvCC,WAAW,CAACW,WAAW,CAAC;QAC1B,CAAC,MAAM;UACLF,OAAO,CAACG,KAAK,CAAC,+BAA+B,EAAER,QAAQ,CAACS,UAAU,CAAC;QACrE;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC;IAEDT,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMW,UAAU,GAAIC,MAAM,IAAK;IAC7B,IAAIC,cAAc,GAAG,CAAC,GAAGjB,QAAQ,CAAC;IAElC,QAAQgB,MAAM;MACZ,KAAK,UAAU;QACbC,cAAc,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,QAAQ,GAAGD,CAAC,CAACC,QAAQ,CAAC;QACtD;MACF,KAAK,MAAM;QACTJ,cAAc,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACG,IAAI,GAAGF,CAAC,CAACE,IAAI,CAAC;QAC9C;MAEF;QACE;IACJ;IAEAZ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEM,cAAc,CAAC,CAAC,CAAC;IACjDhB,WAAW,CAACgB,cAAc,CAAC;IAC3Bd,aAAa,CAACa,MAAM,CAAC;EACvB,CAAC;;EAED;AACF,CAAC;AAACjB,EAAA,CA/CID,oBAAoB;AAAAyB,EAAA,GAApBzB,oBAAoB;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}