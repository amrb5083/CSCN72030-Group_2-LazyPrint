{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TechNerd-Academic\\\\Documents\\\\Source Code Files\\\\Cloned from GitHub\\\\CSCN72030-Group_2-LazyPrint\\\\lazyprint-fe\\\\src\\\\components\\\\PrinterList\\\\PrinterList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { printerListContainerStyle, sortDropdownStyle, printerListStyle, printerItemStyle } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrinterListComponent = () => {\n  _s();\n  const [printers, setPrinters] = useState([]);\n  const [sortOption, setSortOption] = useState('');\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Make a request to your Flask API endpoint\n        const response = await fetch('/api/get_printer_list');\n\n        // Check if the response is successful (status code 200)\n        if (response.ok) {\n          // Parse the JSON data from the response\n          const data = await response.json();\n          console.log('Fetched data:', data); // Add this log\n\n          // Assuming the data structure is { printers: [...] }\n          const printerData = data.printers || [];\n\n          // Update the state with the received printer data\n          setPrinters(printerData);\n        } else {\n          // Handle error cases if needed\n          console.error('Failed to fetch printer data:', response.statusText);\n        }\n      } catch (error) {\n        // Handle fetch errors\n        console.error('Error fetching printer data:', error);\n      }\n    };\n\n    // Call the fetchData function to get data from the Flask API\n    fetchData();\n  }, []); // Empty dependency array to run the effect only once\n\n  const handleSort = option => {\n    // Perform sorting logic based on the selected option\n    let sortedPrinters = [...printers];\n    switch (option) {\n      case 'distance':\n        sortedPrinters.sort((a, b) => a.distance - b.distance);\n        break;\n      case 'time':\n        sortedPrinters.sort((a, b) => a.time - b.time);\n        break;\n      case 'optimized':\n        // Implement your optimized sorting logic here\n        break;\n      case 'recommended':\n        // Implement your recommended sorting logic here\n        break;\n      default:\n        // Default to original order\n        break;\n    }\n    setPrinters(sortedPrinters);\n    setSortOption(option);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: printerListContainerStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => handleSort(e.target.value),\n      style: sortDropdownStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Sort by\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"distance\",\n        children: \"Nearest Distance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"time\",\n        children: \"Shortest Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"optimized\",\n        children: \"Distance-Time Optimized\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"recommended\",\n        children: \"Recommended\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: printerListStyle,\n      children: printers.map(printer => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: printerItemStyle,\n        children: [printer.name, \" - Distance: \", printer.distance, \", Time: \", printer.time]\n      }, printer.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(PrinterListComponent, \"hUv4D0H7NvYwEc8JDL8SrLiEwDY=\");\n_c = PrinterListComponent;\nexport default PrinterListComponent;\nvar _c;\n$RefreshReg$(_c, \"PrinterListComponent\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","printerListContainerStyle","sortDropdownStyle","printerListStyle","printerItemStyle","jsxDEV","_jsxDEV","PrinterListComponent","_s","printers","setPrinters","sortOption","setSortOption","fetchData","response","fetch","ok","data","json","console","log","printerData","error","statusText","handleSort","option","sortedPrinters","sort","a","b","distance","time","style","children","onChange","e","target","value","fileName","_jsxFileName","lineNumber","columnNumber","map","printer","name","id","_c","$RefreshReg$"],"sources":["C:/Users/TechNerd-Academic/Documents/Source Code Files/Cloned from GitHub/CSCN72030-Group_2-LazyPrint/lazyprint-fe/src/components/PrinterList/PrinterList.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  printerListContainerStyle,\r\n  sortDropdownStyle,\r\n  printerListStyle,\r\n  printerItemStyle,\r\n} from './styles';\r\n\r\nconst PrinterListComponent = () => {\r\n  const [printers, setPrinters] = useState([]);\r\n  const [sortOption, setSortOption] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Make a request to your Flask API endpoint\r\n        const response = await fetch('/api/get_printer_list');\r\n        \r\n        // Check if the response is successful (status code 200)\r\n        if (response.ok) {\r\n          // Parse the JSON data from the response\r\n          const data = await response.json();\r\n          console.log('Fetched data:', data); // Add this log\r\n\r\n          // Assuming the data structure is { printers: [...] }\r\n          const printerData = data.printers || [];\r\n\r\n          // Update the state with the received printer data\r\n          setPrinters(printerData);\r\n        } else {\r\n          // Handle error cases if needed\r\n          console.error('Failed to fetch printer data:', response.statusText);\r\n        }\r\n      } catch (error) {\r\n        // Handle fetch errors\r\n        console.error('Error fetching printer data:', error);\r\n      }\r\n    };\r\n\r\n    // Call the fetchData function to get data from the Flask API\r\n    fetchData();\r\n  }, []);  // Empty dependency array to run the effect only once\r\n\r\n  const handleSort = (option) => {\r\n    // Perform sorting logic based on the selected option\r\n    let sortedPrinters = [...printers];\r\n\r\n    switch (option) {\r\n      case 'distance':\r\n        sortedPrinters.sort((a, b) => a.distance - b.distance);\r\n        break;\r\n      case 'time':\r\n        sortedPrinters.sort((a, b) => a.time - b.time);\r\n        break;\r\n      case 'optimized':\r\n        // Implement your optimized sorting logic here\r\n        break;\r\n      case 'recommended':\r\n        // Implement your recommended sorting logic here\r\n        break;\r\n      default:\r\n        // Default to original order\r\n        break;\r\n    }\r\n\r\n    setPrinters(sortedPrinters);\r\n    setSortOption(option);\r\n  };\r\n\r\n  return (\r\n    <div style={printerListContainerStyle}>\r\n      <select onChange={(e) => handleSort(e.target.value)} style={sortDropdownStyle}>\r\n        <option value=\"\">Sort by</option>\r\n        <option value=\"distance\">Nearest Distance</option>\r\n        <option value=\"time\">Shortest Time</option>\r\n        <option value=\"optimized\">Distance-Time Optimized</option>\r\n        <option value=\"recommended\">Recommended</option>\r\n      </select>\r\n\r\n      <ul style={printerListStyle}>\r\n        {printers.map((printer) => (\r\n          <li key={printer.id} style={printerItemStyle}>\r\n            {printer.name} - Distance: {printer.distance}, Time: {printer.time}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PrinterListComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}